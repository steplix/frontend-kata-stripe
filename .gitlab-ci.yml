# default:
#   image: steplix/node:0.0.5

# stages:
#   - test
#   - tag
#   - artifact
#   - docker
#   - deploy
#   - merge
#   - release

# # evita que en cada job se regenere la carpeta node_modules
# cache:
#   key: ${CI_COMMIT_REF_SLUG}
#   paths:
#     - node_modules/

# # evitamos correr el pipeline cuando se push desde el mismo
# workflow:
#   rules:
#     # Prevent run pipeline if commit message has message #skip-pipeline
#     - if: $CI_COMMIT_MESSAGE =~ /#skip-pipeline/
#       when: never
#     # Prevent run pipeline if commit message has message #skip-pipeline
#     - if: $CI_COMMIT_MESSAGE =~ /#increase-version/
#       when: never
#     # Run the pipeline in other cases
#     - when: always

# # job de test
# jobTest:
#   stage: test
#   only:
#     - develop
#   before_script:
#     - steplix-updater
#     - steplix gitlab flag init
#     - npm ci --prefer-offline
#   script:
#     - npm run lint
#     - npm test
#     - steplix gitlab flag success
#   after_script:
#     - steplix gitlab slack
#     - steplix gitlab create-merge-request --target=testing --failonerror=true

# # job de tag
# jobTag:
#   stage: tag
#   only:
#     - staging
#   before_script:
#     - steplix-updater
#     - steplix gitlab setup-git
#     - steplix gitlab flag init
#   script:
#     - steplix gitlab tag
#     - steplix gitlab flag success
#   after_script:
#     - steplix gitlab slack

# # job de artifact
# jobArtifact:
#   stage: artifact
#   only:
#     - tags
#   before_script:
#     - steplix-updater
#     - steplix gitlab setup-git
#     - steplix gitlab setup-amazon
#     - steplix gitlab flag init
#   script:
#     - steplix gitlab artifact-v2
#     - steplix gitlab flag success
#   after_script:
#     - steplix gitlab slack

# # docker
# jobDocker:
#   stage: docker
#   image: docker:19.03.13-git
#   services:
#     - docker:dind
#   only:
#     - testing
#     - staging
#   artifacts:
#     paths:
#       - tag
#   cache: {}
#   before_script:
#     # no-cache
#     - apk add --update --no-cache bash
#     # install steplix client
#     - wget -O - https://gitlab.com/steplix/SteplixClients/-/raw/master/bash-client/install-for-gitlab-docker-vm.sh | bash
#     # setup credentials
#     - steplix gitlab setup-docker-in-docker
#     - steplix gitlab setup-git
#     - steplix gitlab setup-amazon
#     # init
#     - steplix gitlab flag init
#   script:
#     # - tenemos que generar la imagen de docker & push a ECR
#     - steplix gitlab docker-image-to-ecr
#     - steplix gitlab flag success
#   after_script:
#     - steplix gitlab slack

# # job de deploy
# jobDeploy:
#   stage: deploy
#   only:
#     - testing
#     - tags
#   needs:
#     - job: jobArtifact
#       artifacts: true
#       optional: true
#     - job: jobDocker
#       artifacts: true
#       optional: true
#   cache: {}
#   before_script:
#     - steplix-updater
#     - steplix gitlab flag init
#   script:
#     # - actualizar el cloud formation para testing o staging (en base al tag generado)
#     - steplix gitlab aws-cloudformation-deploy --branch=staging
#     - steplix gitlab flag success
#   after_script:
#     - steplix gitlab slack

# # job de merge
# jobMerge:
#   stage: merge
#   when: manual
#   only:
#     - tags
#   cache: {}
#   before_script:
#     - steplix-updater
#     - steplix gitlab flag init
#   script:
#     # - actualizar la branch master/production con lo ultimo de staging
#     - steplix gitlab merge --branch=master --origin=staging
#     - steplix gitlab flag success
#   after_script:
#     - steplix gitlab slack

# # job de release
# jobRelease:
#   stage: release
#   when: manual
#   only:
#     - tags
#   cache: {}
#   before_script:
#     - steplix-updater
#     - steplix gitlab flag init
#   script:
#     # - actualizar el cloud formation para producci√≥n (en base al tag generado)
#     - steplix gitlab aws-cloudformation-deploy --branch=production
#     - steplix gitlab flag success
#   after_script:
#     - steplix gitlab slack
